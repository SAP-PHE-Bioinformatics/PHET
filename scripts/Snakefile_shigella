###config file###

configfile: "phet.yaml"

import pandas as pd
import pathlib as pb 
import subprocess as sp 


##target rules###

if config["shigella"]:
      rule all:
        input:
             expand("{sample}.tsv", sample=config["shigella"]),
             expand("{sample}-hits.tsv", sample=config["shigella"]),
             directory("PHET/Shigella/Shigatyper/"),
             "PHET/Shigella/Summary_Shigatyper.tsv",
             expand("PHET/Shigella/ShigeiFinder/{sample}.tsv", sample=config["shigella"]),
             "PHET/Shigella/Summary_ShigeiFinder.tsv",
             "PHET/Shigella/Shigella_flexneri_report_summary.tsv"

### SHIGATYPER ###           

if config["shigella"]:
      rule shigatyper:
            input: 
                  R1 = "input/{sample}_R1.fastq.gz",
                  R2 = "input/{sample}_R2.fastq.gz"
            output: 
                  "{sample}.tsv",
                  "{sample}-hits.tsv"
            conda:
                 "shigatyperV2"
            shell:
                 """
                 shigatyper --R1 {input.R1} --R2 {input.R2}
                 """

### Parsing all individual reports into a summary file ##

if config["shigella"]:
      rule shigatyper_sum:
            input:
                 files = expand("{sample}.tsv", sample=config["shigella"])
            output:
                 "PHET/Shigella/Summary_Shigatyper.tsv"
            run:
                shfiles = f"{input.files}".split()
                summary_table = pd.DataFrame()
                for file in shfiles:
                    shigatyper = pb.Path(file)
                    df = pd.read_csv(shigatyper, sep = '\t', header = None, names = ['sample', 'prediction', 'ipaB', 'notes'])
                    df = df.iloc[1:]
                    tempdf = pd.DataFrame()
                    sum_df = {'Sample' : df.iloc[0,0], 'Prediction' : df.iloc[0,1], 'ipaB' : df.iloc[0,2], 'Notes' : df.iloc[0,3]
                    }
                    tempdf = pd.DataFrame(data = sum_df, index = [0])
                    if summary_table.empty:
                        summary_table = tempdf
                    else:
                        summary_table = summary_table.append(tempdf, sort = True)
                cols = ['Sample', 'Prediction', 'ipaB', 'Notes']
                summary_table = summary_table.reindex(cols, axis = 'columns')
                summary_table.to_csv(f"{output}", sep = "\t", index = False)


#### moving all tsv outputs by Shigatyper from working directory into Shigatyper folder ##

if config["shigella"]:
      rule move_tsv:
            input:
                 out = expand(rules.shigatyper.output, sample=config["shigella"]),
                 sum = rules.shigatyper_sum.output
            output:
                 directory("PHET/Shigella/Shigatyper/")
            params:
                 outdir = "PHET/Shigella/Shigatyper/"
            shell:
                  """
                  mkdir {params.outdir}
                  mv {input.out} {params.outdir}
                  """




### ShigeiFinder

if config["shigella"]:
      rule ShigeiFinder:
            input:
                 R1 = "input/{sample}_R1.fastq.gz",
                 R2 = "input/{sample}_R2.fastq.gz"
            output:
                 "PHET/Shigella/ShigeiFinder/{sample}.tsv"
            conda:
                 "shigeifinder"
            shell:
                 "shigeifinder -r -i {input.R1} {input.R2} --output {output} -t 16"


#### Creating summary file from output files of ShigeiFinder

if config["shigella"]:
      rule ShigieFinder_sum:
            input:
                 files = expand("PHET/Shigella/ShigeiFinder/{sample}.tsv", sample=config["shigella"])
            output:
                 "PHET/Shigella/Summary_ShigeiFinder.tsv"
            run:
                 sfiles = f"{input.files}".split()
                 summary_table = pd.DataFrame()
                 for file in sfiles:
                       shigeifinder = pb.Path(file)
                       df = pd.read_csv(shigeifinder, sep = '\t', header = None, names = ['#SAMPLE', 'ipaH', 'VIRULENCE', 'CLUSTER', 'SEROTYPE', 'O_ANTIGEN', 'H_ANTIGEN', 'NOTES'])
                       df = df.iloc[1:]
                       tempdf = pd.DataFrame()
                       sum_df = {'SAMPLE ID' : df.iloc[0,0], 'ipaH' : df.iloc[0,1], 'VIRULENCE' : df.iloc[0,2], 'CLUSTER' : df.iloc[0,3],
                      'SEROTYPE' : df.iloc[0,4], 'O_ANTIGEN' : df.iloc[0,5], 'H_ANTIGEN' : df.iloc[0,6], 'NOTES' : df.iloc[0,7]
                       }
                       tempdf = pd.DataFrame(data = sum_df, index = [0])
                       if summary_table.empty:
                              summary_table = tempdf
                       else:
                            summary_table = summary_table.append(tempdf, sort = True)
                 cols = ['SAMPLE ID', 'ipaH', 'VIRULENCE', 'CLUSTER', 'SEROTYPE', 'O_ANTIGEN', 'H_ANTIGEN', 'NOTES']
                 summary_table = summary_table.reindex(cols, axis = 'columns')
                 summary_table.to_csv(f"{output}", sep = "\t", index = False)


if config["shigella"]:
     rule report_sum:
          input:
               seq = "seq_data.tab",
               deno = "denovo.tab",
               kraken = "species_identification.tab",
               st = "mlst.tab",
               resist = "resistome.tab",
               amr = "amrfinder_summary.tsv",
               shigfinder = "PHET/Shigella/Summary_ShigeiFinder.tsv",
               shigtyper = "PHET/Shigella/Summary_Shigatyper.tsv"
          output:
               S_flexneri = "PHET/Shigella/Shigella_flexneri_report_summary.tsv"
          run:
               import pandas as pd
               import numpy as np

               # reading, filtering and formatting seq_data
               seqdata = pd.read_csv(f"{input.seq}", sep ='\t')
               seqdata = seqdata.loc[:, ~seqdata.columns.str.contains('^Unnamed')]
               seqdata = seqdata.loc[:, ['#Accession', 'Reads', 'AvgQual']]
               # reading, filtering and formatting denovo assembly stats
               denovo = pd.read_csv(f"{input.deno}", sep = '\t')
               denovo['Name'] = denovo['Name'].str.replace(r'filtered_contigs/', '')
               denovo['Name'] = denovo['Name'].str.replace(r'.fna', '')
               denovo = denovo.loc[:,['Name','no']]
               denovo = denovo.rename({'Name': '#Accession', 'no':'contigs'}, axis=1)
               denovo['contigs'] = denovo['contigs'].astype(int)
               # reading kraken data
               sp = pd.read_csv(f"{input.kraken}", sep='\t')
               # reading, filtering and formatting MLST data
               cols_list = ['#Accession', 'scheme', 'ST', 'allele1', 'allele2', 'allele3', 'allele4', 'allele5', 'allele6', 'allele7', 'allele8']
               mlst = pd.read_csv(f"{input.st}", sep='\t', header=None, names=cols_list)
               mlst['#Accession'] = mlst['#Accession'].str.replace(r'filtered_contigs/', '')
               mlst['#Accession'] = mlst['#Accession'].str.replace(r'.fna', '')
               mlst = mlst.loc[:,['#Accession', 'scheme', 'ST']]
               # reading, filtering and formatting resistome.tab
               resistome = pd.read_csv(f"{input.resist}", sep='\t')
               resistome['#FILE'] = resistome['#FILE'].str.replace(r'/abricate.tab', '')
               resistome = resistome.rename({'#FILE': '#Accession', 'NUM_FOUND' : 'ABRICATE_count'}, axis =1)
               resistome = resistome.replace('.', np.nan)
               # reading, filtering and formatting amrfinder data
               amrfinder = pd.read_csv(f"{input.amr}", sep ='\t')
               amrfinder = amrfinder.rename({'Name': '#Accession'}, axis =1)
               amrfinder = amrfinder.replace('-', np.nan)
               amrfinder.insert(1, "AMRFP_Count", amrfinder.count(axis=1), True)
               amrfinder['AMRFP_Count'] = amrfinder['AMRFP_Count']-1
               amrfinder['#Accession'] = amrfinder['#Accession'].astype(str)
               # reading and formatting shigeifinder results
               shfinder = pd.read_csv(f"{input.shigfinder}", sep ='\t')
               shfinder = shfinder.rename({'SAMPLE ID': '#Accession', 'SEROTYPE': 'ShigeiFinder Serotype Prediction'}, axis =1)
               shfinder['#Accession'] = shfinder['#Accession'].astype(str)
               shfinder = shfinder.iloc[:,[0,4,3,1,2,5,6,7]]
               # reading and formatting shigatyper results
               shtyper = pd.read_csv(f"{input.shigtyper}", sep='\t')
               shtyper = shtyper.rename({'Sample': '#Accession', 'Prediction' : 'ShigaTyper Serotype Prediction'}, axis =1)
               shtyper['#Accession'] = shtyper['#Accession'].astype(str)

               # Creating final output file by merge
               all_files = [sp, mlst, shfinder, shtyper, resistome, amrfinder]

               # merging two files first
               Output_df = pd.merge(seqdata, denovo, on='#Accession', how='inner')

               # merging remaining files 
               for i in all_files:
                    Output_df = pd.merge(Output_df, i, on='#Accession', how='inner')
               # Removing any Shigella sonnei, removing any columns with all NA values
               # Inserting Genomic QC column to include pass or fail criteria based on QC conditions
               Output_df = Output_df[~Output_df['#1 Match'].str.contains("sonnei")]
               Output_df.dropna(axis=1, how='all', inplace = True)
               Output_df.insert(1, 'Genomic QC', '')
               Output_df['Genomic QC']=np.where((Output_df['Reads']>= 1000000) & (Output_df['contigs']<= 500) & (Output_df['AvgQual'] >= 30), 'PASS', 'FAIL' )

               # writing to output file
               Output_df.to_csv(f"{output.S_flexneri}", sep="\t", header=True, index=False)
